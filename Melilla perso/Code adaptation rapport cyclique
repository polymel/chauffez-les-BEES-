#include <Wire.h>
#include <Adafruit_INA219.h>

// Initialisation de l'INA219
Adafruit_INA219 ina219;

// Définition des broches
#define SDA_PIN 21
#define SCL_PIN 22
#define PWM_PIN 25  // Broche pour le signal PWM

// Variable pour le rapport cyclique PWM
float pwmValue = 0.5; // Valeur initiale (50% de rapport cyclique)

void setup() {
  Serial.begin(115200);  // Initialise le port série
  while (!Serial) {
    delay(1);
  }
  Serial.println("ESP32 connected to UART");

  // Configuration de l'I2C
  Wire.begin(SDA_PIN, SCL_PIN);
  Serial.println("I2C initialisé");

  // Initialisation de l'INA219
  if (!ina219.begin()) {
    Serial.println("Failed to find INA219 chip");
    while (1) { delay(10); }
  } else {
    Serial.println("INA219 initialisé");
  }

  // Configuration du PWM
 // ledcSetup(0, 5000, 10); // Canal 0, fréquence 5kHz, résolution 10 bits
  //ledcAttachPin(PWM_PIN, 0);
} // Ajout de l'accolade fermante pour la fonction setup()

void loop() {
  // Lire les valeurs actuelles de tension et de courant
  float currentVoltage = ina219.getBusVoltage_V();
  float currentCurrent = ina219.getCurrent_mA() / 1000.0; // Convertir en Ampères

  // Calculer la puissance actuelle
  float currentPower = currentVoltage * currentCurrent;

  // Comparer la puissance actuelle avec la puissance précédente
  static float previousPower = currentPower;
  static float previousVoltage = currentVoltage;

  if (currentPower > previousPower) {
    // Si la puissance augmente, vérifier la tension
    if (currentVoltage > previousVoltage) {
      // Si la tension augmente, diminuer le rapport cyclique
      pwmValue -= 0.01;
    } else {
      // Si la tension diminue, augmenter le rapport cyclique
      pwmValue += 0.01;
    }
  } else {
    // Si la puissance diminue, vérifier la tension
    if (currentVoltage > previousVoltage) {
      // Si la tension augmente, diminuer le rapport cyclique
      pwmValue -= 0.01;
    } else {
      // Si la tension diminue, augmenter le rapport cyclique
      pwmValue += 0.01;
    }
  }

  // Limiter pwmValue entre 0 et 1
  pwmValue = constrain(pwmValue, 0.0, 1.0);

  // Mettre à jour le rapport cyclique PWM
  int pwmDutyCycle = (int)(pwmValue * 1023); // Utiliser la résolution 10 bits
  ledcWrite(0, pwmDutyCycle);

  // Mettre à jour la puissance précédente et la tension précédente
  previousPower = currentPower;
  previousVoltage = currentVoltage;

  // Afficher les valeurs sur le moniteur série
  Serial.print("Tension: ");
  Serial.print(currentVoltage);
  Serial.print("V Courant: ");
  Serial.print(currentCurrent);
  Serial.print("A Puissance: ");
  Serial.print(currentPower);
  Serial.print("W Rapport Cyclique: ");
  Serial.println(pwmValue);

  // Attendre un peu avant la prochaine lecture
  delay(1000);
}
